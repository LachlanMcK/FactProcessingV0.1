"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//import  mongoose from "mongoose";
//import * as mongoose  from "mongoose";
const mongoose = require("mongoose"); //https://stackoverflow.com/questions/34482136/mongoose-the-typescript-way
// define the shape of the Line Items part of Forms
const LineItemDef = {
    FieldId: String,
    FieldIndex: Number,
    Value: Object
};
let LineItemsSchema = new mongoose.Schema(LineItemDef);
// define the shape of the sections part of Forms
// sections are made up of Line Items
const SectionDef = {
    SectionId: String,
    SectionName: String,
    LineItems: [LineItemsSchema]
};
let SectionSchema = new mongoose.Schema(SectionDef);
// define the shape of Forms
// Forms are made up of Sections which are made up of Line Items
const FormDef = {
    ClientInternalId: {
        type: Number,
        required: true
    },
    AccountSequenceNumber: Number,
    RoleTypeCode: Number,
    PeriodStartDt: Date,
    FormType: {
        type: String,
        required: true
    },
    TransactionId: {
        type: Number,
        required: true
    },
    workItemId: String,
    Sections: [SectionSchema],
    createdAt: Date,
    updatedAt: Date,
    DT_Update: String,
    TM_Update: String
};
let FormSchema = new mongoose.Schema(FormDef);
//This is the default
const FormCollectionDetails = {
    collection: 'Forms',
    versionKey: false
};
function setFootprintProperties(form, updateOnlyFlag) {
    const now = new Date();
    if (!form.createdAt && !(updateOnlyFlag)) {
        //todo: investigate getting this from _id  https://docs.mongodb.com/manual/reference/method/ObjectId.getTimestamp/
        form.createdAt = now;
    }
    form.updatedAt = now;
    //todo: investigate making this virtual
    form.DT_Update = now.toLocaleDateString();
    form.TM_Update = now.toLocaleTimeString();
    return form;
}
exports.setFootprintProperties = setFootprintProperties;
FormSchema.index({ ClientInternalId: 1, formType: 1 });
FormSchema.index({ TransactionId: 1 }, { unique: true });
FormSchema.index({ ClientInternalId: 1, AccountSequenceNumber: 1, RoleTypeCode: 1 }, { unique: false });
FormSchema.index({ workItemId: 1 }, { sparse: true });
//todo: this is fine for dev but need to tidy this up
FormSchema.set('autoIndex', true);
//FormSchema.set('autoIndex', false);
exports.Form = mongoose.model('Form', FormSchema);
//module.exports = Form
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFDbkMsd0NBQXdDO0FBQ3hDLHFDQUFzQyxDQUFFLDBFQUEwRTtBQUVsSCxtREFBbUQ7QUFDbkQsTUFBTSxXQUFXLEdBQUk7SUFDbkIsT0FBTyxFQUFFLE1BQU07SUFDZixVQUFVLEVBQUUsTUFBTTtJQUNsQixLQUFLLEVBQUUsTUFBTTtDQUNkLENBQUE7QUFFRCxJQUFJLGVBQWUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFdkQsaURBQWlEO0FBQ2pELHFDQUFxQztBQUNyQyxNQUFNLFVBQVUsR0FBRztJQUNqQixTQUFTLEVBQUUsTUFBTTtJQUNqQixXQUFXLEVBQUUsTUFBTTtJQUNuQixTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUM7Q0FDN0IsQ0FBQTtBQUVELElBQUksYUFBYSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUVwRCw0QkFBNEI7QUFDNUIsZ0VBQWdFO0FBQ2hFLE1BQU0sT0FBTyxHQUFHO0lBQ2QsZ0JBQWdCLEVBQUU7UUFDaEIsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRLEVBQUUsSUFBSTtLQUFDO0lBQ2pCLHFCQUFxQixFQUFFLE1BQU07SUFDN0IsWUFBWSxFQUFFLE1BQU07SUFDcEIsYUFBYSxFQUFFLElBQUk7SUFDbkIsUUFBUSxFQUFFO1FBQ1IsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRLEVBQUUsSUFBSTtLQUFDO0lBQ2pCLGFBQWEsRUFBRTtRQUNiLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFLElBQUk7S0FBQztJQUNqQixVQUFVLEVBQUUsTUFBTTtJQUNsQixRQUFRLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDekIsU0FBUyxFQUFFLElBQUk7SUFDZixTQUFTLEVBQUUsSUFBSTtJQUNmLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLFNBQVMsRUFBRSxNQUFNO0NBQ2hCLENBQUM7QUFFSixJQUFJLFVBQVUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFOUMscUJBQXFCO0FBQ3JCLE1BQU0scUJBQXFCLEdBQUc7SUFDNUIsVUFBVSxFQUFFLE9BQU87SUFDbkIsVUFBVSxFQUFFLEtBQUs7Q0FDbEIsQ0FBQTtBQUVELFNBQWdCLHNCQUFzQixDQUFDLElBQVMsRUFBRSxjQUF1QjtJQUN2RSxNQUFNLEdBQUcsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUN4QyxrSEFBa0g7UUFDbEgsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7S0FDdEI7SUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztJQUNyQix1Q0FBdUM7SUFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzFDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQVhELHdEQVdDO0FBRUQsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN2RCxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDekQsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDdkcsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRXRELHFEQUFxRDtBQUNyRCxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNsQyxxQ0FBcUM7QUFFeEIsUUFBQSxJQUFJLEdBQXNDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTFGLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0ICBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbi8vaW1wb3J0ICogYXMgbW9uZ29vc2UgIGZyb20gXCJtb25nb29zZVwiO1xuaW1wb3J0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTsgIC8vaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzQ0ODIxMzYvbW9uZ29vc2UtdGhlLXR5cGVzY3JpcHQtd2F5XG5cbi8vIGRlZmluZSB0aGUgc2hhcGUgb2YgdGhlIExpbmUgSXRlbXMgcGFydCBvZiBGb3Jtc1xuY29uc3QgTGluZUl0ZW1EZWYgPSAge1xuICBGaWVsZElkOiBTdHJpbmcsXG4gIEZpZWxkSW5kZXg6IE51bWJlcixcbiAgVmFsdWU6IE9iamVjdFxufVxuXG5sZXQgTGluZUl0ZW1zU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYShMaW5lSXRlbURlZik7XG5cbi8vIGRlZmluZSB0aGUgc2hhcGUgb2YgdGhlIHNlY3Rpb25zIHBhcnQgb2YgRm9ybXNcbi8vIHNlY3Rpb25zIGFyZSBtYWRlIHVwIG9mIExpbmUgSXRlbXNcbmNvbnN0IFNlY3Rpb25EZWYgPSB7XG4gIFNlY3Rpb25JZDogU3RyaW5nLFxuICBTZWN0aW9uTmFtZTogU3RyaW5nLFxuICBMaW5lSXRlbXM6IFtMaW5lSXRlbXNTY2hlbWFdXG59XG5cbmxldCBTZWN0aW9uU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYShTZWN0aW9uRGVmKTtcblxuLy8gZGVmaW5lIHRoZSBzaGFwZSBvZiBGb3Jtc1xuLy8gRm9ybXMgYXJlIG1hZGUgdXAgb2YgU2VjdGlvbnMgd2hpY2ggYXJlIG1hZGUgdXAgb2YgTGluZSBJdGVtc1xuY29uc3QgRm9ybURlZiA9IHtcbiAgQ2xpZW50SW50ZXJuYWxJZDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICByZXF1aXJlZDogdHJ1ZX0sXG4gIEFjY291bnRTZXF1ZW5jZU51bWJlcjogTnVtYmVyLFxuICBSb2xlVHlwZUNvZGU6IE51bWJlcixcbiAgUGVyaW9kU3RhcnREdDogRGF0ZSxcbiAgRm9ybVR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWV9LFxuICBUcmFuc2FjdGlvbklkOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmVkOiB0cnVlfSwgXG4gIHdvcmtJdGVtSWQ6IFN0cmluZyxcbiAgU2VjdGlvbnM6IFtTZWN0aW9uU2NoZW1hXSxcbiAgY3JlYXRlZEF0OiBEYXRlLFxuICB1cGRhdGVkQXQ6IERhdGUsXG4gIERUX1VwZGF0ZTogU3RyaW5nLFxuICBUTV9VcGRhdGU6IFN0cmluZ1xuICB9O1xuXG5sZXQgRm9ybVNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoRm9ybURlZik7XG5cbi8vVGhpcyBpcyB0aGUgZGVmYXVsdFxuY29uc3QgRm9ybUNvbGxlY3Rpb25EZXRhaWxzID0ge1xuICBjb2xsZWN0aW9uOiAnRm9ybXMnLFxuICB2ZXJzaW9uS2V5OiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Rm9vdHByaW50UHJvcGVydGllcyhmb3JtOiBhbnksIHVwZGF0ZU9ubHlGbGFnPzpCb29sZWFuKSB7XG4gIGNvbnN0IG5vdzogRGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGlmICghZm9ybS5jcmVhdGVkQXQgJiYgISh1cGRhdGVPbmx5RmxhZykpIHtcbiAgICAvL3RvZG86IGludmVzdGlnYXRlIGdldHRpbmcgdGhpcyBmcm9tIF9pZCAgaHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2UvbWV0aG9kL09iamVjdElkLmdldFRpbWVzdGFtcC9cbiAgICBmb3JtLmNyZWF0ZWRBdCA9IG5vdztcbiAgfVxuICBmb3JtLnVwZGF0ZWRBdCA9IG5vdztcbiAgLy90b2RvOiBpbnZlc3RpZ2F0ZSBtYWtpbmcgdGhpcyB2aXJ0dWFsXG4gIGZvcm0uRFRfVXBkYXRlID0gbm93LnRvTG9jYWxlRGF0ZVN0cmluZygpO1xuICBmb3JtLlRNX1VwZGF0ZSA9IG5vdy50b0xvY2FsZVRpbWVTdHJpbmcoKTtcbiAgcmV0dXJuIGZvcm07XG59XG5cbkZvcm1TY2hlbWEuaW5kZXgoeyBDbGllbnRJbnRlcm5hbElkOiAxLCBmb3JtVHlwZTogMSB9KTsgXG5Gb3JtU2NoZW1hLmluZGV4KHsgVHJhbnNhY3Rpb25JZDogMSB9LCB7IHVuaXF1ZTogdHJ1ZSB9KTsgXG5Gb3JtU2NoZW1hLmluZGV4KHsgQ2xpZW50SW50ZXJuYWxJZDogMSwgQWNjb3VudFNlcXVlbmNlTnVtYmVyOiAxLCBSb2xlVHlwZUNvZGU6MSB9LCB7IHVuaXF1ZTogZmFsc2UgfSk7IFxuRm9ybVNjaGVtYS5pbmRleCh7IHdvcmtJdGVtSWQ6IDEgfSwgeyBzcGFyc2U6IHRydWUgfSk7IFxuXG4vL3RvZG86IHRoaXMgaXMgZmluZSBmb3IgZGV2IGJ1dCBuZWVkIHRvIHRpZHkgdGhpcyB1cFxuRm9ybVNjaGVtYS5zZXQoJ2F1dG9JbmRleCcsIHRydWUpO1xuLy9Gb3JtU2NoZW1hLnNldCgnYXV0b0luZGV4JywgZmFsc2UpO1xuXG5leHBvcnQgY29uc3QgRm9ybTogbW9uZ29vc2UuTW9kZWw8bW9uZ29vc2UuRG9jdW1lbnQ+ID0gbW9uZ29vc2UubW9kZWwoJ0Zvcm0nLCBGb3JtU2NoZW1hKTtcblxuLy9tb2R1bGUuZXhwb3J0cyA9IEZvcm1cbiJdfQ==