"use strict";
// all this does is export an array of available get/put routes (URI permutations)
// ./FormController uses this info to register routes; it also registers a few other routes
Object.defineProperty(exports, "__esModule", { value: true });
const clientLevel = '/:ClientIdentifierType/:ClientIdentifierValue';
const accountLevel = '/:ClientIdentifierType/:ClientIdentifierValue/Accounts/:AccountSequenceNumber';
const roleLevel = '/:ClientIdentifierType/:ClientIdentifierValue/Accounts/:AccountSequenceNumber/Roles/:RoleTypeShortDecode';
const roleOnlyLevel = '/:ClientIdentifierType/:ClientIdentifierValue/Roles/:RoleTypeShortDecode';
const carpatlevel = [clientLevel, accountLevel, roleLevel, roleOnlyLevel];
const period = ['/PeriodStartDt/:PeriodStartDt', ''];
const draftForm = '/DraftForms';
const processedForm = '/ProcessedForms';
const undecidedForm = '/Forms';
const formFlavours = [draftForm, processedForm, undecidedForm];
const formTypenoId = '/:FormTypeMung';
const formTypeWithId = '/:FormTypeMung/:TransactionId';
const formSuffix = [formTypenoId, formTypeWithId];
exports.formRoutes = [];
function setUpGetRoutes(router, getForms, putForm) {
    console.log(`Adding route to routers....`);
    carpatlevel.forEach((a) => period.forEach((b) => formFlavours.forEach((c) => formSuffix.forEach((d) => {
        let r = a + b + c + d;
        exports.formRoutes.push(r);
    }))));
}
exports.setUpGetRoutes = setUpGetRoutes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0VXBGb3JtUm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2V0VXBGb3JtUm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrRkFBa0Y7QUFDbEYsMkZBQTJGOztBQUkzRixNQUFNLFdBQVcsR0FBRywrQ0FBK0MsQ0FBQztBQUNwRSxNQUFNLFlBQVksR0FBRywrRUFBK0UsQ0FBQztBQUNyRyxNQUFNLFNBQVMsR0FBRywwR0FBMEcsQ0FBQztBQUM3SCxNQUFNLGFBQWEsR0FBRywwRUFBMEUsQ0FBQztBQUNqRyxNQUFNLFdBQVcsR0FBRyxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRTFFLE1BQU0sTUFBTSxHQUFHLENBQUMsK0JBQStCLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFckQsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO0FBQ2hDLE1BQU0sYUFBYSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztBQUMvQixNQUFNLFlBQVksR0FBRyxDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFFL0QsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLENBQUM7QUFDdEMsTUFBTSxjQUFjLEdBQUcsK0JBQStCLENBQUM7QUFDdkQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFFdkMsUUFBQSxVQUFVLEdBQVksRUFBRSxDQUFDO0FBRXBDLFNBQWdCLGNBQWMsQ0FBQyxNQUFzQixFQUFFLFFBQWEsRUFBRSxPQUFZO0lBQzlFLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUMzQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDbEcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLGtCQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQ0FBQztBQU5ELHdDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYWxsIHRoaXMgZG9lcyBpcyBleHBvcnQgYW4gYXJyYXkgb2YgYXZhaWxhYmxlIGdldC9wdXQgcm91dGVzIChVUkkgcGVybXV0YXRpb25zKVxuLy8gLi9Gb3JtQ29udHJvbGxlciB1c2VzIHRoaXMgaW5mbyB0byByZWdpc3RlciByb3V0ZXM7IGl0IGFsc28gcmVnaXN0ZXJzIGEgZmV3IG90aGVyIHJvdXRlc1xuXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5jb25zdCBjbGllbnRMZXZlbCA9ICcvOkNsaWVudElkZW50aWZpZXJUeXBlLzpDbGllbnRJZGVudGlmaWVyVmFsdWUnO1xuY29uc3QgYWNjb3VudExldmVsID0gJy86Q2xpZW50SWRlbnRpZmllclR5cGUvOkNsaWVudElkZW50aWZpZXJWYWx1ZS9BY2NvdW50cy86QWNjb3VudFNlcXVlbmNlTnVtYmVyJztcbmNvbnN0IHJvbGVMZXZlbCA9ICcvOkNsaWVudElkZW50aWZpZXJUeXBlLzpDbGllbnRJZGVudGlmaWVyVmFsdWUvQWNjb3VudHMvOkFjY291bnRTZXF1ZW5jZU51bWJlci9Sb2xlcy86Um9sZVR5cGVTaG9ydERlY29kZSc7XG5jb25zdCByb2xlT25seUxldmVsID0gJy86Q2xpZW50SWRlbnRpZmllclR5cGUvOkNsaWVudElkZW50aWZpZXJWYWx1ZS9Sb2xlcy86Um9sZVR5cGVTaG9ydERlY29kZSc7XG5jb25zdCBjYXJwYXRsZXZlbCA9IFtjbGllbnRMZXZlbCwgYWNjb3VudExldmVsLCByb2xlTGV2ZWwsIHJvbGVPbmx5TGV2ZWxdO1xuXG5jb25zdCBwZXJpb2QgPSBbJy9QZXJpb2RTdGFydER0LzpQZXJpb2RTdGFydER0JywgJyddO1xuXG5jb25zdCBkcmFmdEZvcm0gPSAnL0RyYWZ0Rm9ybXMnO1xuY29uc3QgcHJvY2Vzc2VkRm9ybSA9ICcvUHJvY2Vzc2VkRm9ybXMnO1xuY29uc3QgdW5kZWNpZGVkRm9ybSA9ICcvRm9ybXMnO1xuY29uc3QgZm9ybUZsYXZvdXJzID0gW2RyYWZ0Rm9ybSwgcHJvY2Vzc2VkRm9ybSwgdW5kZWNpZGVkRm9ybV07XG5cbmNvbnN0IGZvcm1UeXBlbm9JZCA9ICcvOkZvcm1UeXBlTXVuZyc7XG5jb25zdCBmb3JtVHlwZVdpdGhJZCA9ICcvOkZvcm1UeXBlTXVuZy86VHJhbnNhY3Rpb25JZCc7XG5jb25zdCBmb3JtU3VmZml4ID0gW2Zvcm1UeXBlbm9JZCwgZm9ybVR5cGVXaXRoSWRdO1xuXG5leHBvcnQgbGV0IGZvcm1Sb3V0ZXM6c3RyaW5nW10gPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFVwR2V0Um91dGVzKHJvdXRlcjogZXhwcmVzcy5Sb3V0ZXIsIGdldEZvcm1zOiBhbnksIHB1dEZvcm06IGFueSkge1xuICAgIGNvbnNvbGUubG9nKGBBZGRpbmcgcm91dGUgdG8gcm91dGVycy4uLi5gKTtcbiAgICBjYXJwYXRsZXZlbC5mb3JFYWNoKChhKSA9PiBwZXJpb2QuZm9yRWFjaCgoYikgPT4gZm9ybUZsYXZvdXJzLmZvckVhY2goKGMpID0+IGZvcm1TdWZmaXguZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBsZXQgciA9IGEgKyBiICsgYyArIGQ7XG4gICAgICAgIGZvcm1Sb3V0ZXMucHVzaChyKTtcbiAgICB9KSkpKTtcbn0iXX0=